
<MudFileUpload T="IBrowserFile"
               OnFilesChanged="OnInputFileChanged"
               Hidden="@false"
               InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
               InputStyle="opacity:0"
               Accept=".png, .jpg" MaximumFileCount="1"
               @ondragenter="@SetDragClass"
               @ondragleave="@ClearDragClass"
               @ondragend="@ClearDragClass">
    <ButtonTemplate>
        <MudPaper Height="300px"
                  Outlined="true"
                  Class="@_dragClass">
            <MudText Typo="Typo.h6">
                Drag and drop image here or click
            </MudText>
            @if (_fileName is not null)
            {
                <MudChip Color="Color.Dark" Text="@_fileName" />
            }
        </MudPaper>
        <MudToolBar DisableGutters="true"
                    Class="relative d-flex justify-end gap-4 z-30">
            <MudButton HtmlTag="label"
                       Color="Color.Primary"
                       for="@context.Id"
                       Variant="Variant.Filled">
                Open file picker
            </MudButton>
    
            <MudButton OnClick="@Clear"
                       Color="Color.Error"
                       Disabled="@(_fileName is null)"
                       Variant="Variant.Filled">
                Clear
            </MudButton>
        </MudToolBar>
    </ButtonTemplate>
</MudFileUpload>


@code {
    
    public EventCallback<IBrowserFile> OnImageChanged { get; set; }
    public EventCallback OnClear { get; set; }
    
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    
    private string? _fileName;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
      
        _fileName = e.File.Name;
        await OnImageChanged.InvokeAsync(e.File);
    }

    private async Task Clear()
    {
        _fileName = null;
        await OnClear.InvokeAsync();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}