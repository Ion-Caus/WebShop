@page "/create-product"

@using WebShop.Application.Services
@using WebShop.Application.Dtos
@using WebShop.Domain.ValueObjects
@using WebShop.Web.Models
@using WebShop.Web.Services
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IUserProfileService UserProfileService
@inject ISnackbar Snackbar

<MudPage Title="Create Product">
    <MudForm>
        <MudTextField @bind-Value="_productName" Label="Product Name" Required="true" />
        <MudTextField @bind-Value="_productDescription" Label="Product Description" Required="true" />

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateProduct">Create Product</MudButton>
    </MudForm>
</MudPage>

@code {
    private string? _productName;
    private string? _productDescription;
    private decimal? _productPrice = 1;
    private string? _currencyCode;
    private string? _productCategory = "Fish";

    private UserSettings? _userSettings;

    protected override void OnInitialized()
    {
        _userSettings = UserProfileService.GetUserSettings();
        
        _currencyCode = _userSettings.CurrencyCode;
    }

    private async Task CreateProduct()
    {
        if (_productPrice is null 
            || _productCategory is null
            || _productName is null
            || _productDescription is null
            || _currencyCode is null)
        {
            return;
        }
        
        var newProduct = new CreateProductDto(
            ProductId: Guid.NewGuid(), 
            Name: _productName,
            Description: _productDescription,
            PricePerKg: new Price(_productPrice.Value, _currencyCode),
                ImageUrl: null,
                Category: _productCategory
            );

        await ProductService.CreateProduct(newProduct);
        
        Snackbar.Add("Product created successfully", Severity.Success);

        NavigationManager.NavigateTo("/products");
    }
}